extends Node

var lifeP2 = 20
var lifeP1 = 20

var p1AttackPower = 0
var p2AttackPower = 0

var p1PowerType = 0
var p2PowerType = 0

var p1RockSpell = 1
var p1PaperSpell = 1
var p1ScissorsSpell = 1

var p2RockSpell = 1
var p2PaperSpell = 1
var p2ScissorsSpell = 1

var roundWinner = 0


# warning-ignore:unused_class_variable
var fireballfuncP1 = funcref(self, "fireballP1")
# warning-ignore:unused_class_variable
var quickHealfuncP1 = funcref(self, "quickHealP1")

# warning-ignore:unused_class_variable
var rock1funcP1 = funcref(self, "rock1P1")
# warning-ignore:unused_class_variable
var rock2funcP1 = funcref(self, "rock2P1")
# warning-ignore:unused_class_variable
var rock3funcP1 = funcref(self, "rock3P1")

# warning-ignore:unused_class_variable
var paper1funcP1 = funcref(self, "paper1P1")
# warning-ignore:unused_class_variable
var paper2funcP1 = funcref(self, "paper2P1")
# warning-ignore:unused_class_variable
var paper3funcP1 = funcref(self, "paper3P1")

# warning-ignore:unused_class_variable
var scissors1funcP1 = funcref(self, "scissors1P1")
# warning-ignore:unused_class_variable
var scissors2funcP1 = funcref(self, "scissors2P1")
# warning-ignore:unused_class_variable
var scissors3funcP1 = funcref(self, "scissors3P1")

# warning-ignore:unused_class_variable
var rock1funcP2 = funcref(self, "rock1P2")
# warning-ignore:unused_class_variable
var rock2funcP2 = funcref(self, "rock2P2")
# warning-ignore:unused_class_variable
var rock3funcP2 = funcref(self, "rock3P2")

# warning-ignore:unused_class_variable
var paper1funcP2 = funcref(self, "paper1P2")
# warning-ignore:unused_class_variable
var paper2funcP2 = funcref(self, "paper2P2")
# warning-ignore:unused_class_variable
var paper3funcP2 = funcref(self, "paper3P2")

# warning-ignore:unused_class_variable
var scissors1funcP2 = funcref(self, "scissors1P2")
# warning-ignore:unused_class_variable
var scissors2funcP2 = funcref(self, "scissors2P2")
# warning-ignore:unused_class_variable
var scissors3funcP2 = funcref(self, "scissors3P2")

var powerlistP1
var powerlistP2
var spellIndexP1
var spellIndexP2
var yopo
var yopo1
func _ready():
	
	powerlistP1 = [rock1funcP1,rock2funcP1,rock3funcP1,paper1funcP1,paper2funcP1,paper3funcP1,scissors1funcP1, scissors2funcP1, scissors3funcP1]
	powerlistP2 = [rock1funcP2,rock2funcP2,rock3funcP2,paper1funcP2,paper2funcP2,paper3funcP2,scissors1funcP2, scissors2funcP2, scissors3funcP2]
	
	
func processAttack():
	"""
	if p1PowerType == 1:
		if p1RockSpell == 1:
			p1AttackPower = 8
		elif p1RockSpell == 2:
			p1AttackPower = 6
		elif p1RockSpell == 3:
			p1AttackPower = 4
		
	if p1PowerType == 2:
		if p1PaperSpell == 1:
			p1AttackPower = 8
		if p1PaperSpell == 2:
			p1AttackPower = 6
		if p1PaperSpell == 3:
			p1AttackPower = 4
			
	if p1PowerType == 3:
		if p1ScissorsSpell == 1:
			p1AttackPower = 8
		if p1ScissorsSpell == 2:
			p1AttackPower = 6
		if p1ScissorsSpell == 3:
			p1AttackPower = 4
	
	
	if p2PowerType == 1:
		if p2RockSpell == 1:
			p2AttackPower = 10
		elif p2RockSpell == 2:
			p2AttackPower = 8
		elif p2RockSpell == 3:
			p2AttackPower = 4
		
	if p2PowerType == 2:
		if p2PaperSpell == 1:
			p2AttackPower = 8
		if p2PaperSpell == 2:
			p2AttackPower = 6
		if p2PaperSpell == 3:
			p2AttackPower = 4
			
	if p2PowerType == 3:
		if p2ScissorsSpell == 1:
			p2AttackPower = 8
		if p2ScissorsSpell == 2:
			p2AttackPower = 6
		if p2ScissorsSpell == 3:
			p2AttackPower = 4
	"""
	if p1PowerType == 1:
		spellIndexP1 = -1 + p1RockSpell
	elif p1PowerType == 2:
		spellIndexP1 = 2 + p1PaperSpell
	elif p1PowerType == 3:
		spellIndexP1 = 5 + p1ScissorsSpell
	
	if p2PowerType == 1:
		spellIndexP2 = -1 + p2RockSpell
	elif p2PowerType == 2:
		spellIndexP2 = 2 + p2PaperSpell
	elif p2PowerType == 3:
		spellIndexP2 = 5 + p2ScissorsSpell
	
	p1AttackPower = powerlistP1[spellIndexP1].call_func(true)
	p2AttackPower = powerlistP2[spellIndexP2].call_func(true)
	
	if (p1PowerType - p2PowerType == 1) or (p1PowerType - p2PowerType == -2):
		roundWinner = 1
	elif (p2PowerType - p1PowerType == 1) or (p2PowerType - p1PowerType == -2):
		roundWinner = 2 
	else:
		if p1AttackPower > p2AttackPower:
			roundWinner = 1
		elif p2AttackPower < p1AttackPower:
			roundWinner = 2
		else:
			roundWinner = 0
		##################
	if roundWinner == 1:
		powerlistP1[spellIndexP1].call_func(false)
		
		"""
		if p1PowerType == 1:
			if p1RockSpell == 1:
				rock1P1()
			elif p1RockSpell == 2:
				rock2P1()
			elif p1RockSpell == 3:
				rock3P1()
			
		if p1PowerType == 2:
			if p1PaperSpell == 1:
				paper1P1()
			if p1PaperSpell == 2:
				paper2P1()
			if p1PaperSpell == 3:
				paper3P1()
				
		if p1PowerType == 3:
			if p1ScissorsSpell == 1:
				scissors1P1()
			if p1ScissorsSpell == 2:
				scissors2P1()
			if p1ScissorsSpell == 3:
				scissors3P1()
"""

	if roundWinner == 2:
		powerlistP2[spellIndexP2].call_func(false)
		"""
		if p2PowerType == 1:
			if p2RockSpell == 1:
				rock1P2()
			elif p2RockSpell == 2:
				rock2P2()
			elif p2RockSpell == 3:
				rock3P2()
			
		if p2PowerType == 2:
			if p2PaperSpell == 1:
				paper1P2()
			if p2PaperSpell == 2:
				paper2P2()
			if p2PaperSpell == 3:
				paper3P2()
				
		if p2PowerType == 3:
			if p2ScissorsSpell == 1:
				scissors1P2()
			if p2ScissorsSpell == 2:
				scissors2P2()
			if p2ScissorsSpell == 3:
				scissors3P2()
	"""
	
	if p1PowerType == 1:
		if p1RockSpell >= 3:
			p1RockSpell = 1
		else :
			p1RockSpell += 1
			
	elif p1PowerType == 2:
		if p1PaperSpell >= 3:
			p1PaperSpell = 1
		else :
			p1PaperSpell += 1
			
	elif p1PowerType == 3:
		if p1ScissorsSpell >= 3:
			p1PaperSpell = 1
		else :
			p1PaperSpell += 1

			
	if p2PowerType == 1:
		if p2RockSpell >= 3:
			p2RockSpell = 1
		else :
			p2RockSpell += 1
			
	elif p2PowerType == 2:
		if p2PaperSpell >= 3:
			p2PaperSpell = 1
		else :
			p2PaperSpell += 1
			
	elif p2PowerType == 3:
		if p2ScissorsSpell >= 3:
			p2PaperSpell = 1
		else :
			p2PaperSpell += 1
			

	if p1PowerType == 1:
		spellIndexP1 = -1 + p1RockSpell
	elif p1PowerType == 2:
		spellIndexP1 = 2 + p1PaperSpell
	elif p1PowerType == 3:
		spellIndexP1 = 5 + p1ScissorsSpell
	
	if p2PowerType == 1:
		spellIndexP2 = -1 + p2RockSpell
	elif p2PowerType == 2:
		spellIndexP2 = 2 + p2PaperSpell
	elif p2PowerType == 3:
		spellIndexP2 = 5 + p2ScissorsSpell
			
func fireballP1(var isAttackPower):
	if isAttackPower == true:
		var attackPower = 10
		var name = "Fireball"
		var description = "On a sucess, blast a fireball at the opponent and deal 5 damage" 
		var response = [attackPower, name, description]
		return response
	else :
		lifeP2 -= 5

func quickHealP1(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP2 -= 3

func rock1P1(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP2 -= 8
func rock2P1(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP2 -= 5
		
func rock3P1(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP2 -= 3

func paper1P1(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP2 -= 8
func paper2P1(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP2 -= 5
func paper3P1(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP2 -= 3

func scissors1P1(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP2 -= 8
func scissors2P1(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP2 -= 5
func scissors3P1(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP2 -= 3
	
func rock1P2(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP1 -= 8
func rock2P2(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP1 -= 5
func rock3P2(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP1 -= 3

func paper1P2(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP1 -= 8
func paper2P2(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP1 -= 5
func paper3P2(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP1 -= 3

func scissors1P2(var isAttackPower):
	if isAttackPower == true:
		return 10
	else :
		lifeP1 -= 8
func scissors2P2(var isAttackPower):
	if isAttackPower == true:
		return 8
	else :
		lifeP1 -= 5
func scissors3P2(var isAttackPower):
	if isAttackPower == true:
		return 5
	else :
		lifeP1 -= 3
