extends Control

var choosedElementP1 = 0
var choosedElementP2 = 0
var p2Ready = false
var p1Ready = false


var RockP1Texture
var PaperP1Texture
var ScissorsP1Texture

var RockP2Texture
var PaperP2Texture
var ScissorsP2Texture

var gameOverScreen

onready var spellCardRockP1AP = get_node("PanelP1/RockP1/SpellCard/AttackPower")
onready var spellCardRockP1Title = get_node("PanelP1/RockP1/SpellCard/Title")
onready var spellCardRockP1Desc = get_node("PanelP1/RockP1/SpellCard/Description")

onready var spellCardPaperP1AP = get_node("PanelP1/PaperP1/SpellCard/AttackPower")
onready var spellCardPaperP1Title = get_node("PanelP1/PaperP1/SpellCard/Title")
onready var spellCardPaperP1Desc = get_node("PanelP1/PaperP1/SpellCard/Description")

onready var spellCardScissorsP1AP = get_node("PanelP1/ScissorsP1/SpellCard/AttackPower")
onready var spellCardScissorsP1Title = get_node("PanelP1/ScissorsP1/SpellCard/Title")
onready var spellCardScissorsP1Desc = get_node("PanelP1/ScissorsP1/SpellCard/Description")


onready var spellCardRockP2AP = get_node("PanelP2/RockP2/SpellCard/AttackPower")
onready var spellCardRockP2Title = get_node("PanelP2/RockP2/SpellCard/Title")
onready var spellCardRockP2Desc = get_node("PanelP2/RockP2/SpellCard/Description")

onready var spellCardPaperP2AP = get_node("PanelP2/PaperP2/SpellCard/AttackPower")
onready var spellCardPaperP2Title = get_node("PanelP2/PaperP2/SpellCard/Title")
onready var spellCardPaperP2Desc = get_node("PanelP2/PaperP2/SpellCard/Description")

onready var spellCardScissorsP2AP = get_node("PanelP2/ScissorsP2/SpellCard/AttackPower")
onready var spellCardScissorsP2Title = get_node("PanelP2/ScissorsP2/SpellCard/Title")
onready var spellCardScissorsP2Desc = get_node("PanelP2/ScissorsP2/SpellCard/Description")

func _ready():
	
	gameOverScreen = get_node("Panel3")
	
	gameOverScreen.hide()
	
	gameManager.lifeP1 = 20
	gameManager.lifeP2 = 20
	
	RockP1Texture = get_node("PanelP1/AttackIndicatorP1/RockP1Texture")
	PaperP1Texture = get_node("PanelP1/AttackIndicatorP1/PaperP1Texture")
	ScissorsP1Texture = get_node("PanelP1/AttackIndicatorP1/ScissorsP1Texture")
	
	RockP2Texture = get_node("PanelP2/AttackIndicatorP2/RockP2Texture")
	PaperP2Texture = get_node("PanelP2/AttackIndicatorP2/PaperP2Texture")
	ScissorsP2Texture = get_node("PanelP2/AttackIndicatorP2/ScissorsP2Texture")
	
	spellCardPaperP1AP.text = str(gameManager.fireballP1(true)[0])
	spellCardPaperP1Title.text = gameManager.fireballP1(true)[1]
	spellCardPaperP1Desc.text = gameManager.fireballP1(true)[2]
	
	spellCardRockP1AP
	spellCardRockP1Title
	spellCardRockP1Desc
	
	
	
	RockP1Texture.hide()
	PaperP1Texture.hide()
	ScissorsP1Texture.hide()
	
	RockP2Texture.hide()
	PaperP2Texture.hide()
	ScissorsP2Texture.hide()
	

	
	get_node("PanelLifeP2/lifeCounterP2").text = gameManager.powerlistP1[gameManager.spellIndexP1].call_func(true)[0]
	get_node("PanelLifeP1/lifeCounterP1").text = str(gameManager.lifeP1)
	
	set_process(true)
	
func _process(delta):

	if Input.is_action_just_pressed("P1_Confirm"):
		p1Ready = true

	if Input.is_action_just_pressed("p1_Rock"):
		choosedElementP1 = 1
		RockP1Texture.hide()
		PaperP1Texture.hide()
		ScissorsP1Texture.hide()
	if Input.is_action_just_pressed("p1_Paper"):
		choosedElementP1 = 2
		RockP1Texture.hide()
		PaperP1Texture.hide()
		ScissorsP1Texture.hide()
	if Input.is_action_just_pressed("p1_Scissors"):
		choosedElementP1 = 3
		RockP1Texture.hide()
		PaperP1Texture.hide()
		ScissorsP1Texture.hide()
		
		
	if Input.is_action_just_pressed("P2_Confirm"):
		p2Ready = true

	if Input.is_action_just_pressed("p2_Rock"):
		choosedElementP2 = 1
		RockP2Texture.hide()
		PaperP2Texture.hide()
		ScissorsP2Texture.hide()
	if Input.is_action_just_pressed("p2_Paper"):
		choosedElementP2 = 2
		RockP2Texture.hide()
		PaperP2Texture.hide()
		ScissorsP2Texture.hide()
	if Input.is_action_just_pressed("p2_Scissors"):
		choosedElementP2 = 3
		RockP2Texture.hide()
		PaperP2Texture.hide()
		ScissorsP2Texture.hide()
		
	if p2Ready && p1Ready:
		gameManager.p1PowerType = choosedElementP1
		gameManager.p2PowerType = choosedElementP2
		
		if choosedElementP1 == 1:
			RockP1Texture.show()
		elif choosedElementP1 == 2:
			PaperP1Texture.show()
		elif choosedElementP1 == 3:
			ScissorsP1Texture.show()
		
		if choosedElementP2 == 1:
			RockP2Texture.show()
		elif choosedElementP2 == 2:
			PaperP2Texture.show()
		elif choosedElementP2 == 3:
			ScissorsP2Texture.show()
		
		
		
		gameManager.processAttack()
		
		get_node("PanelLifeP2/lifeCounterP2").text = str(gameManager.lifeP2)
		get_node("PanelLifeP1/lifeCounterP1").text = str(gameManager.lifeP1)
		get_node("PanelLifeP1/lifeCounterP2").text = str(gameManager.p1AttackPower)
		get_node("PanelLifeP2/lifeCounterP3").text = str(gameManager.p2AttackPower)
		p2Ready = false
		p1Ready = false
		
		if gameManager.lifeP1 <= 0 && gameManager.lifeP2 >= 0:
			gameOverScreen.show()
		elif gameManager.lifeP1 >= 0 && gameManager.lifeP2 <= 0:
			gameOverScreen.show()
		elif gameManager.lifeP1 <= 0 && gameManager.lifeP2 <= 0:
			gameOverScreen.show()
		
	
"""
func _on_FireButtonP2_pressed():
	choosedElementP2 = 1
	gameManager.p2AttackPower = gameManager.puissanceFeuP2
	
func _on_IceButtonP2_pressed():
	choosedElementP2 = 2
	gameManager.p2AttackPower = gameManager.puissanceIceP2
	
func _on_GroundButtonP2_pressed():
	choosedElementP2 = 3
	gameManager.p2AttackPower = gameManager.puissanceGroundP2
	
func _on_ElectricButtonP2_pressed():
	choosedElementP2 = 4
	gameManager.p2AttackPower = gameManager.puissanceElectricP2
	
func _on_WaterButtonP2_pressed():
	choosedElementP2 = 5
	gameManager.p2AttackPower = gameManager.puissanceWaterP2
"""

func _on_confirmAttackP2_pressed():
	p2Ready = true
	
	
func _on_restartButton_pressed():
	get_tree().reload_current_scene()

"""
func _on_FireButtonP1_pressed():
	choosedElementP1 = 1
	gameManager.p1AttackPower = gameManager.puissanceFeuP1


func _on_IceButtonP1_pressed():
	choosedElementP1 = 2
	gameManager.p1AttackPower = gameManager.puissanceIceP1


func _on_GroundButtonP1_pressed():
	choosedElementP1 = 3
	gameManager.p1AttackPower = gameManager.puissanceGroundP1


func _on_ElectricButtonP1_pressed():
	choosedElementP1 = 4
	gameManager.p1AttackPower = gameManager.puissanceElectricP1


func _on_WaterButtonP1_pressed():
	choosedElementP1 = 5
	gameManager.p1AttackPower = gameManager.puissanceWaterP1

"""
func _on_confirmAttackP1_pressed():
	p1Ready = true


func _on_RockP1Button_pressed():
	choosedElementP1 = 1

func _on_PaperP1Button_pressed():
	choosedElementP1 = 2
	
func _on_ScissorsP1Button_pressed():
	choosedElementP1 = 3





func _on_RockP2Button_pressed():
	choosedElementP2 = 1

func _on_PaperP2Button_pressed():	
	choosedElementP2 = 2

func _on_ScissorsP2Button_pressed():
	choosedElementP2 = 3







